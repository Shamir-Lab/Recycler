{
  "name": "Recycler",
  "tagline": "This is the codebase for Recycler, the new tool described in our manuscript: http://biorxiv.org/content/early/2016/04/05/029926",
  "body": "# Getting Recycler\r\nYou can download Recycler [here](https://github.com/Shamir-Lab/Recycler/releases/download/Recycler-v0.6/Recycler-0.6.zip) or clone it via the link below. In case you download the zip, unzip the file before following the instructions below (ignoring the 'git clone' line)\r\n\r\n# Quick start\r\n\r\nAssuming we have prepared a filtered BAM file (aln-pe.bam) prepared as described [below](#bam-prep) and an isolate assembly graph (e.g., assembly_graph.fastg from [SPAdes 3.6+](http://bioinf.spbau.ru/en/spades)), and that 55 was the maximum k-mer length used by the assembler, \r\n\r\n    git clone https://github.com/rozovr/Recycler.git\r\n    cd Recycler\r\n    python recycle.py -g assembly_graph.fastg -k 55 -b aln-pe.bam -i True\r\n    \r\nFor metagenome/plasmidome assemblies, we remove the final (\"-i\") parameter, which has a default False value.\r\n    \r\n# Introduction\r\n\r\nRecycler is a tool designed for extracting circular sequences from de novo assembly graphs. It can be applied on isolate as well as metagenome and plasmidome data. The circular sequences it outputs may be plasmids, phages, etc. Recycler uses only features of the assembly graph (contig overlaps, lengths, and coverage level information)  and alignments of paired-end reads to the contigs in the graph in order to identify these sequences.  \r\n\r\n\r\n# Requirements\r\n\r\nRecycler is implemented in Python, and has been tested only on Python 2.7+. We recommend using the Anaconda distribution to ease package installations.\r\nRecycler requires the following packages be installed:\r\n\r\n* [NumPy](http://www.numpy.org/)\r\n* [NetworkX](http://networkx.github.io/)\r\n* [PySAM](https://github.com/pysam-developers/pysam)\r\n* [nose](https://nose.readthedocs.org/en/latest/)\r\n\r\nRecommended for generating inputs (as used during testing):\r\n* [BWA 0.7.5+](https://github.com/lh3/bwa)\r\n* [samtools 0.1.19+](https://github.com/samtools/samtools)\r\n* [SPAdes 3.6.2+](http://bioinf.spbau.ru/en/spades)\r\n\r\n# Detailed usage\r\n\r\npython recycle.py -g GRAPH -k MAX_K -b BAM [-l LENGTH] [-m MAX_CV] [-i ISO]\r\n\r\n### required arguments:\r\n    \r\n    -g GRAPH\r\n    (spades 3.50+) assembly graph FASTG file to process:\r\n    for spades 3.5, before_rr.fastg; for spades 3.6+, assembly_graph.fastg\r\n    -k MAX_K\r\n    integer reflecting maximum k value used by the assembler\r\n    -b BAM\r\n    BAM file resulting from aligning reads to contigs file, filtering for best matches\r\n \r\n### optional arguments:\r\n\r\n    -l LENGTH\r\n    minimum length required for reporting [default: 1000]\r\n    -m MAX_CV\r\n    coefficient of variation used for pre-selection\r\n    [default: 0.5, higher--> less restrictive]\r\n    -i ISO\r\n    True or False value reflecting whether data sequenced\r\n    was an isolated strain \r\n\r\n# <a name=\"bam-prep\">Preparing the BAM input:\r\n\r\nRecycler uses paired-end alignments of the reads originally assembled to the output assembly graph to filter and select amongst candidate circular sequences. In order to do so, it requires as input a BAM file containing the set of best alignment hits for each read pair. We recommend the following steps (tested on BWA 0.7.5 and samtools 1.19) to prepare the BAM file:\r\n\r\n    python make_fasta_from_fastg.py -g assembly_graph.fastg\r\n    \r\n    bwa index assembly_graph.nodes.fasta\r\n    \r\n    bwa mem  assembly_graph.nodes.fasta R1.fastq.gz R2.fastq.gz | samtools view -buS - > reads_pe.bam\r\n    \r\n    samtools view -bF 0x0800 reads_pe.bam > reads_pe_primary.bam\r\n    \r\n    samtools sort reads_pe_primary.bam reads_pe_primary.sort\r\n    \r\n    samtools index reads_pe_primary.sort.bam\r\n\r\nfollowing these steps, we only need the files reads_pe_primary.sort.bam and reads_pe_primary.sort.bam.bai.\r\n\r\n# Outputs:\r\n\r\n1. \\<prefix\\>.cycs.fasta  - a fasta formatted file of predicted plasmids\r\n2. \\<prefix\\>.cycs.paths_w_cov.txt - a text file containing information about plasmids composed of multiple contigs.\r\n\r\nThe format for the second file is:\r\n* *\\<plasmid name\\>* - e.g., RNODE_5_length_42666_cov_19.93685\r\n* *\\<node names in the original graph making up this cycle\\>* - e.g., \\('NODE_2801_length_42596_cov_19.8677', \"NODE_2387_length_125_cov_34.7286'\"\\).\r\n* *\\<coverage levels of nodes at the time they are removed\\>* - e.g., \\[19.8677, 34.7286\\]\r\n* *\\<node numbers in the original graph making up this cycle\\>* - e.g., \\[2801, 2387\\]. This can be useful for visualizing the path in tools like [Bandage](https://rrwick.github.io/Bandage/)\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}